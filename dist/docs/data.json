{
    "project": {
        "name": "FullScreenManager",
        "version": "1.0.0-alpha.26",
        "description": "A unified API to use the fullscreen mode of various modern browsers",
        "url": "http://cote.cc/projects/fullscreenmanager"
    },
    "files": {
        "../src/FullScreenManager.js": {
            "name": "../src/FullScreenManager.js",
            "modules": {},
            "classes": {
                "FullScreenManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "FullScreenManager": {
            "name": "FullScreenManager",
            "shortname": "FullScreenManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../src/FullScreenManager.js",
            "line": 5,
            "description": "#### Overview ####\n\nThe `FullScreenManager` object offers a unified API for working with the\nexperimental \"fullscreen\" mode of various modern browsers. It allows the user to\nview an element or the whole document in full screen without any visible UI\nelements.\n\n#### Compatibility ####\n\nThe `FullScreenManager` library should work in Chrome 15+, Safari 5.1+, Opera 12.1+,\nInternet Explorer 11+ and Firefox 10+. It can also be manually enabled in Firefox 9\nby setting `fullscreen-api.enabled` to `true` in `about:config`.\n\n#### Linking and loading ####\n\nLoading the library is very simple. You just need to link to it in your html file\nlike so:\n\n     <script src=\"FullScreenManager-1.0.0-alpha.26.min.js\"></script>\n\nDoing that will create the `FullScreenManager` variable in the global scope\n(under `window`). Since it's a singleton, there is no need to instantiate anything.\n\nNote: if you are using *RequireJS/AMD*, nothing will be declared under the `window`\nobject. Instead, you should simply require the library as usual:\n\n     define(function (require) {\n         var FullScreenManager = require('FullScreenManager');\n     });\n\n#### Usage ####\n\nFor security reasons, full screen mode can only be triggered from within an event\nlistener tied to a user interaction. In other words, it can only be activated as a\nresult of the user triggering a mouse or keyboard event. It is *not possible*\nto enable full screen mode automatically (during `onload` for example).\n\nHere is an example of code that will listen for a click anywhere on the document\nand toggle full screen mode for the whole page:\n\n    document.documentElement.onclick = function() {\n        FullScreenManager.toggle();\n    }\n\nYou can also specify which element should be made full screen. To do that, you\nsimply pass the element or its id to the `FullScreenManager.request()` or\n`FullScreenManager.toggle()` method:\n\n    FullScreenManager.request(\"myElement\");\n\nYou can also listen for events. For instance, if you wanted to do something after\nfull screen mode was engaged, you could do that:\n\n    FullScreenManager.on('activation', onActivated);\n\n    function onActivated(e) {\n        console.log(\"We are now in full screen mode!\");\n    }\n\nOther events such as \"deactivation\" and \"error\" also exist. Check the \"events\"\nsection for more details.\n\n#### Limitations ####\n\nBy design, navigating to another page, changing tabs, reloading the page, or\nswitching to another application will exit full screen mode. This is a browser\nlimitation.\n\nTo enter fullscreen mode from *within* an `iframe`, you need to add some attributes\non the `iframe` tag.\n\n    <iframe src=\"x.html\" webkitAllowFullScreen mozAllowFullScreen allowFullScreen></iframe>",
            "static": 1,
            "version": "@@version",
            "author": "@@author",
            "todo": [
                "Test on mobile (Chrome et Firefox devraient être supportés)",
                "Test hosted vs local",
                "Make sure that everything works as it should when the user uses F11 and ESC to enter and leave full screen mode",
                "Normalize scrollbar behaviour",
                "For unsupported browsers",
                "fall back to a fullscreen window with minimal chrome ?",
                "In Firefox and IE (on Windows only)",
                "the browser changes the background-color\nof an element to black if this element is not the root and does not already have an\nassigned background-color. We should assign",
                "listen for key combos to trigger fullscreen ?",
                "make it jquery-compatible",
                "Add option to maintain aspect ratio and to center the fullscreen stuff ?",
                "allow setting the overflow property ?\n\n\nthe following rule changes the background color of the element if it's not the root element:\n\n:-moz-full-screen:not(:root)\n\n\n\n\n|*:not(:root):-moz-full-screen {\n     position: fixed !important;\n     top: 0 !important;\n     left: 0 !important;\n     right: 0 !important;\n     bottom: 0 !important;\n     z-index: 2147483647 !important;\n     background: black;\n     width: 100% !important;\n     height: 100% !important;\n     margin: 0 !important;\n     min-width: 0 !important;\n     max-width: none !important;\n     min-height: 0 !important;\n     max-height: none !important;\n     box-sizing: border-box !important;\n }\n\n    // If there is a full-screen element that is not the root then\n    //we should hide the viewport scrollbar. We exclude the chrome\n    //document to prevent reframing of contained plugins.\n   :not(xul|*):root:-moz-full-screen-ancestor {\n       overflow: hidden !important;\n   }\n\n\n\n\nOne other thing to note is that these \"full screen\" commands don't have a vertical\nscrollbar",
                "you need to specify this within the CSS:\n\n    :fullscreen\n    :-ms-fullscreen",
                ":-webkit-full-screen",
                ":-moz-full-screen {\n           overflow: auto !important;\n       }\n\n\n\n\n    It's not guaranteed that you'll be able to switch into fullscreen mode. For example",
                "<iframe> elements have the mozallowfullscreen attribute (webkitallowfullscreen",
                "etc)\n    in order to opt-in to allowing their content to be displayed in fullscreen mode. In\n    addition",
                "certain kinds of content",
                "such as windowed plug-ins",
                "cannot be presented in\n    fullscreen mode. Attempting to put an element which can't be displayed in fullscreen\n    mode (or the parent or descendant of such an element) won't work. Instead",
                "the element\n    which requested fullscreen will receive a mozfullscreenerror event. When a fullscreen\n    request fails",
                "Firefox will log an error message to the Web Console explaining why\n    the request failed. In Chrome and newer versions of Opera however",
                "no such warning\n    is generated.\n\n\n    :-webkit-full-screen {}\n    :-moz-full-screen {}\n    :-ms-fullscreen {}\n    :full-screen { } //pre-spec\n    :fullscreen { } // spec\n\n   :-webkit-full-screen video {\n       width: 100%;\n       height: 100%;\n   }\n\n   ::backdrop {}\n   ::-ms-backdrop {}"
            ]
        }
    },
    "classitems": [
        {
            "file": "../src/FullScreenManager.js",
            "line": 177,
            "description": "Event triggered once fullscreen mode has been fully activated. You can watch\nthis event by using the `FullScreenManager.addEventListener()` method.",
            "itemtype": "event",
            "name": "activation",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The target element that triggered the event,",
                            "type": "Element"
                        },
                        {
                            "name": "data",
                            "description": "The actual custom data that was specified when\nattaching the listener.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "final": 1,
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 190,
            "description": "Event triggered once fullscreen mode has been fully deactivated. You can\nwatch this event by using the `FullScreenManager.addEventListener()`\nmethod.",
            "itemtype": "event",
            "name": "deactivation",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The target element that triggered the event,",
                            "type": "Element"
                        },
                        {
                            "name": "data",
                            "description": "The actual custom data that was specified when\nattaching the listener.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "final": 1,
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 204,
            "description": "Event triggered when an error occurs. You can watch this event by using the\n`FullScreenManager.addEventListener()` method.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The target element that triggered the event,",
                            "type": "Element"
                        },
                        {
                            "name": "error",
                            "description": "The actual error.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "The actual custom data that was specified when\nattaching the listener.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "final": 1,
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 315,
            "description": "[read-only] Indicates whether full screen mode is currently activated or\nnot.",
            "itemtype": "property",
            "name": "active",
            "default": "false",
            "type": "Boolean",
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 331,
            "description": "[read-only] Indicates whether full screen mode is available in the current\nenvironment or not. Typically, full screen mode is available only for a\npage that has no windowed plugins, and if all `<iframe>` elements which\ncontain the document have their `allowfullscreen` attribute set.",
            "itemtype": "property",
            "name": "available",
            "type": "Boolean",
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 347,
            "description": "The CSS class that is applied to the fullscreen element. If this property\nis changed while in fullscreen mode, the fullscreen element will have its\nclass changed.",
            "itemtype": "property",
            "name": "cssClass",
            "default": "fullscreen",
            "type": "String",
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 370,
            "description": "Controls whether the `FullScreenManager` will alter the CSS to include a\nclass on the fullscreen element and modify its CSS properties to normalize\nbehaviour between different browsers.",
            "itemtype": "property",
            "name": "doNotAlterCss",
            "default": "false",
            "type": "Boolean",
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 385,
            "description": "[read-only] The `Element` that is currently being shown full screen. If no\nelement is currently full screen, this property will be null.",
            "itemtype": "property",
            "name": "element",
            "default": "null",
            "type": "Element",
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 401,
            "description": "[read-only] Indicates whether the keyboard can be used for input while in\nfullscreen. This is useful because not all platforms/versions support this.",
            "itemtype": "property",
            "name": "keyboardInputAllowed",
            "type": "Boolean",
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 417,
            "description": "[read-only] Version of the `FullScreenManager` class.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "static": 1,
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 618,
            "description": "Tries to activate full screen mode for the specified element. If no element is\nspecified or the specified element is not found, the whole document will be used\ninstead. The function accepts an actual `Element` or an element id.\n\nIf full screen mode cannot be activated, `false` will be returned.",
            "itemtype": "method",
            "name": "activate",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The id of the element or the actual `Element`\nobject to make fullscreen.",
                    "type": "Element|String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "An object holding options to pass to `FullScreenManager`",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cssClass",
                            "description": "The CSS Class to add to a fullscreen\nelement",
                            "type": "String",
                            "optional": true,
                            "optdefault": "fullscreen"
                        },
                        {
                            "name": "scaleMode",
                            "description": "The scaling mode to use",
                            "type": "String",
                            "optional": true,
                            "optdefault": "???"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The FullScreen object (to allow chaining)",
                "type": "FullScreenManager|null"
            },
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 675,
            "description": "Attaches an event listener function that will be executed when the specified event\noccurs. The third parameter makes it possible to pass arbitrary data to the event\nhandling function.",
            "itemtype": "method",
            "name": "addEventListener",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "A string identifying the event to attach to. Check the\n\"Events\" section of the documentation for a list of supported events.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function that will be executed when the matching\nevent occurs.",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "Arbitrary data to pass to the listener function when\ntriggered.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The `FullScreenManager` object (to allow chaining)",
                "type": "FullScreenManager"
            },
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 708,
            "description": "Deactivates full screen mode and returns the browser and document to their normal\nviewing state.",
            "itemtype": "method",
            "name": "deactivate",
            "chainable": 1,
            "static": 1,
            "return": {
                "description": "The `FullScreenManager` object (to allow chaining)",
                "type": "FullScreenManager"
            },
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 728,
            "description": "Returns `true` if the specified event listener has been previously attached to the\nspecified event. Returns `false `otherwise. If only the `type` is specified, it\nreturns `true`, if there is at least one listener defined for that `type`. If no\nparameters are defined, it returns `true` if at least one listener has been defined\nwithout regards the which type it was attached to.",
            "itemtype": "method",
            "name": "hasEventListener",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The event type. Check the \"Events\" section of the\ndocumentation for a list of supported events.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listener",
                    "description": "The listener function that was previously attached",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 767,
            "description": "Removes a previously set event listener. If no parameters are specified, all\nlisteners will be removed. If only the `type` is specified, all listeners attached\nto that type will be removed. Finally, if both parameters are specified only a\nspecific listener attached to a specific event type will be removed.",
            "itemtype": "method",
            "name": "removeEventListener",
            "chainable": 1,
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The event type. Check the \"Events\" section of the\ndocumentation for a list of supported events.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listener",
                    "description": "The listener function to remove.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The `FullScreenManager` object (to allow chaining)",
                "type": "FullScreenManager"
            },
            "class": "FullScreenManager"
        },
        {
            "file": "../src/FullScreenManager.js",
            "line": 809,
            "description": "Toggles full screen mode on and off for the specified element. If no element is\nspecified, full screen mode is toggled for the whole document.",
            "itemtype": "method",
            "name": "toggle",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The id of the element or the actual `Element`\nto make fullscreen.",
                    "type": "Element | String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The `FullScreenManager` object (to allow chaining)",
                "type": "FullScreenManager"
            },
            "class": "FullScreenManager"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " ../src/FullScreenManager.js:5"
        }
    ]
}